File 'unittest1.c'
Lines executed:88.89% of 18
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:27.89% of 545
Creating 'dominion.c.gcov'

File 'unittest2.c'
Lines executed:97.56% of 41
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:29.72% of 545
Creating 'dominion.c.gcov'

File 'unittest3.c'
Lines executed:100.00% of 11
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:32.11% of 545
Creating 'dominion.c.gcov'

File 'unittest4.c'
Lines executed:87.50% of 16
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:37.61% of 545
Creating 'dominion.c.gcov'

File 'cardtest1.c'
Lines executed:81.25% of 32
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:37.61% of 545
Creating 'dominion.c.gcov'

File 'cardtest2.c'
Lines executed:95.45% of 22
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:38.35% of 545
Creating 'dominion.c.gcov'

File 'cardtest3.c'
Lines executed:77.14% of 35
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:38.35% of 545
Creating 'dominion.c.gcov'

File 'cardtest4.c'
Lines executed:77.14% of 35
Creating 'cardtest4.c.gcov'

Function 'EmbargoCard'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 1

Function 'SeaHagCard'
Lines executed:0.00% of 8
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'MinionCard'
Lines executed:0.00% of 18
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 6

Function 'GreatHallCard'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'SmithyCard'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:16.32% of 190
Branches executed:21.47% of 163
Taken at least once:9.82% of 163
Calls executed:13.21% of 53

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:39.45% of 545
Branches executed:36.61% of 407
Taken at least once:28.99% of 407
Calls executed:22.22% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:	
        -:    2://isGameOver test
        -:    3:  
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:
        -:   11:
        1:   12:int main () {
        -:   13:
        -:   14:	
        1:   15:	int passes = 0; int fails = 0; // keeps track of case results 
        1:   16:	int tpass = 0;	int tfail = 0;// totals
        -:   17:
        -:   18:	//initalize a fake gamestate
        -:   19:	struct gameState G;
        1:   20:	struct gameState *p = &G;
        1:   21:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   22:	       sea_hag, tribute, smithy};
        1:   23:  	initializeGame(2, k, 7, p);
        -:   24:
        -:   25:	
        -:   26:	////Test for false positives/////
        -:   27:	/////////////////////////////////
        1:   28:	int cases = 1000; //how many random numbers will be tested	
     1001:   29:	for(int i=0; i<cases; i++){
        -:   30:		
     1000:   31:		int player = rand()%4;
     1000:   32:		int random = rand()%(MAX_HAND);
        -:   33:		
     1000:   34:		p->whoseTurn=player;
     1000:   35:		p->handCount[player]=random;
        -:   36:		
     1000:   37:		int answer = numHandCards(p);
        -:   38:		
     1000:   39:		if(answer == random ){passes++;}
        -:   40:		else{
    #####:   41:			fails++; 
    #####:   42:			printf("\nFailure on player %d, returned: %d should be %d",player,answer,random);
        -:   43:		}
        -:   44:		
        -:   45:		
        -:   46:	}
        -:   47:
        -:   48:
        -:   49:
        -:   50:	//result output
        1:   51:			printf("\n\n            Test Complete: %d total passes,  %d total fails\n\n\n",passes,fails);
        -:   52:	
        -:   53:
        -:   54:
        1:   55:return 0;
        -:   56:}
        -:   57:
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2://isGameOver test
        -:    3:  
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:
        -:   11:
        1:   12:int main () {
        -:   13:
        -:   14:	
        1:   15:	int passes = 0; int fails = 0; // keeps track of case results 
        1:   16:	int tpass = 0;	int tfail = 0;// totals
        -:   17:
        -:   18:	//initalize a fake gamestate
        -:   19:	struct gameState G;
        1:   20:	struct gameState *p = &G;
        1:   21:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   22:	       sea_hag, tribute, smithy};
        1:   23:  	initializeGame(2, k, 7, p);
        -:   24:
        -:   25:	
        -:   26:	////Test for false positives/////
        -:   27:	/////////////////////////////////
        1:   28:	int cases = 1000; //how many random numbers will be tested	
     1001:   29:	for(int i=0; i<cases; i++){
        -:   30:		int testSupply[treasure_map+1];
     1000:   31:		for(int i=0;i<treasure_map;i++){testSupply[i] = rand()%11 + 1;}
     1000:   32:		for(int i=0;i<treasure_map;i++){p->supplyCount[i] = testSupply[i];}	
        -:   33:			
     1000:   34:		int x=isGameOver(p);
        -:   35:			
     1000:   36:		if(x==0){passes++; }
     1000:   37:		if(x==1){fails++; }
        -:   38:	
        -:   39:	}		
        1:   40:	printf("\n\n False Positive Test Complete: %d passes,  %d fails",passes,fails);
        1:   41:	tpass=tpass+passes; tfail=tfail+fails;
        1:   42:	passes = 0; fails = 0;	
        -:   43:	
        -:   44:	
        -:   45:	
        -:   46:	////Test for 0 province detection/////
        -:   47:	/////////////////////////////////
        -:   48:		
     1001:   49:	for(int i=0; i<cases; i++){
        -:   50:		int testSupply[treasure_map+1];
     1000:   51:		for(int i=0;i<treasure_map;i++){testSupply[i] = rand()%11 + 1;}
     1000:   52:		for(int i=0;i<treasure_map;i++){p->supplyCount[i] = testSupply[i];}	
        -:   53:		
     1000:   54:		int pcard = rand()%2;
     1000:   55:		p->supplyCount[province] = pcard;
        -:   56:		
     1000:   57:		int x=isGameOver(p);
        -:   58:			
     1000:   59:		if((x==0&&pcard==1)||(x==1&&pcard==0)){passes++;}
    #####:   60:		else{fails++;}
        -:   61:		
        -:   62:	}		
        1:   63:	printf("\n\n 0 province Test Complete: %d passes,  %d fails",passes,fails);
        1:   64:	tpass=tpass+passes; tfail=tfail+fails;
        1:   65:	passes = 0; fails = 0;
        -:   66:	
        -:   67:	
        -:   68:	
        -:   69:	////Test for three 0 detection/////
        -:   70:	/////////////////////////////////
        -:   71:		
     1001:   72:	for(int i=0; i<cases; i++){
     1000:   73:		for(int i=0;i<treasure_map;i++){p->supplyCount[i] = rand()%13;}
     1000:   74:		p->supplyCount[province] = 1;
        -:   75:		
     1000:   76:		int game0count=0;
        -:   77:
        -:   78:		
     1000:   79:		for(int i=0;i<treasure_map;i++){if(p->supplyCount[i] ==0){game0count++;}}
        -:   80:			
        -:   81:		
        -:   82:		
     1000:   83:		int x=isGameOver(p);
        -:   84:		
     1000:   85:		if((x==0&&game0count<3)||(x==1&&game0count>2)){
      982:   86:			passes++;
        -:   87:			//printf("\nPass x: %d count: %d  Supply: %d",x,game0count, treasure_map);
        -:   88:			//for(int i=0;i<treasure_map;i++){printf("%d ",p->supplyCount[i]);}
        -:   89:		}
        -:   90:		else{
       18:   91:			fails++;
        -:   92:			//printf("\nFail x: %d count: %d  Supply: %d",x,game0count, treasure_map);
        -:   93:			//for(int i=0;i<treasure_map;i++){printf("%d ",p->supplyCount[i]);}
        -:   94:		}
        -:   95:	}		
        1:   96:	printf("\n\n Three 0 Test Complete: %d passes,  %d fails\n\n",passes,fails);
        1:   97:	tpass=tpass+passes; tfail=tfail+fails;
        1:   98:	passes = 0; fails = 0;
        -:   99:
        -:  100:
        -:  101:	//result output
        1:  102:			printf("\n\n            Test Complete: %d total passes,  %d total fails\n\n\n",tpass,tfail);
        -:  103:	
        -:  104:
        -:  105:
        1:  106:return 0;
        -:  107:}
        -:  108:
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://KingdomCards test
        -:    2:  
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:
        1:   11:int main () {
        -:   12:
        -:   13:	
        1:   14:	int passes = 0; int fails = 0; // keeps track of case results
        -:   15:
        -:   16:	
        -:   17:	//The test
        1:   18:	int cases = 1000; //how many random numbers will be tested	
     1001:   19:	for(int i=0; i<cases; i++){	
        -:   20:	
        -:   21:
        -:   22:		
        -:   23:		
        -:   24:		int testK[10];
     1000:   25:		for(int i=0;i<10;i++){testK[i]=(rand()%19+7);}
        -:   26:	
     1000:   27:		int* kings=kingdomCards((testK[0]),testK[1],testK[2],testK[3],testK[4],testK[5],testK[6],testK[7],testK[8],testK[9]);
        -:   28:	
    11000:   29:		for(int i = 0; i<10;i++ ){
    10000:   30:			if(testK[i]!=kings[i]){fails++; break;}
    10000:   31:			else if(testK[i]==kings[i] && i==9){passes++;}
        -:   32:			
        -:   33:			
        -:   34:			//printf("\n   %d    %d   ", testK[i],kings[i]);
        -:   35:		}
        -:   36:		
        -:   37:		//printf("\n\n");
        -:   38:	}
        -:   39:	
        -:   40:	
        1:   41:		printf("\n\nPasses: %d   Fails: %d\n\n",passes,fails);
        -:   42:
        -:   43:
        1:   44:return 0;
        -:   45:}
        -:   46:
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* This is a unit test for the whoseTurn() functions
        -:    2: *	sets a value to whoesturn in the gameState 
        -:    3: *	then compares it to the return of the function
        -:    4: *	whoseTurn(). this test does not fail invalid 
        -:    5: *	number of players because the function does not 
        -:    6: *	specify that it is supposed to do so.
        -:    7: *
        -:    8: */
        -:    9:  
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        1:   18:int main () {
        -:   19:
        1:   20:int values[27]={0,2,5,8,0,3,6,6,5,4,4,5,4,4,3,4,3,5,3,5,3,4,2,5,4,4,4};
        -:   21:
        -:   22:	
        1:   23:	int passes = 0; int fails = 0; // keeps track of case results
        -:   24:
        -:   25:	
        -:   26:	//The test
        1:   27:	int cases = 1000; //how many random numbers will be tested	
     1001:   28:	for(int i=0; i<cases; i++){	
        -:   29:	
     1000:   30:		int x = (rand()%36)-5;
        -:   31:		
        -:   32:		
     1000:   33:		int cost = getCost(x);
        -:   34:		
     1751:   35:		if((x>=0)&&(x<=26)){
      751:   36:			int test =values[x];
      751:   37:			if(cost==test){passes++;}
    #####:   38:			else{fails++;}
        -:   39:		}
      249:   40:		else if((x<0)||(x>26)){
      249:   41:			if(cost==-1){passes++;}
    #####:   42:			else{fails++; printf("returned %d  given %d\n",cost, x);}
        -:   43:		}
        -:   44:		
        -:   45:	}
        -:   46:	
        1:   47:	printf("Passes %d  Fails %d",passes, fails);
        -:   48:
        1:   49:return 0;
        -:   50:}
        -:   51:
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* This is a unit test for the whoseTurn() functions
        -:    2: *	sets a value to whoesturn in the gameState 
        -:    3: *	then compares it to the return of the function
        -:    4: *	whoseTurn(). this test does not fail invalid 
        -:    5: *	number of players because the function does not 
        -:    6: *	specify that it is supposed to do so.
        -:    7: *
        -:    8: */
        -:    9:  
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        1:   18:int main () {
        -:   19:
        -:   20:	
        1:   21:	int passes = 0; int fails = 0; // keeps track of case results
        -:   22:
        -:   23:	//initalize a fake gamestate
        -:   24:	struct gameState G;
        1:   25:	struct gameState *p = &G;
        1:   26:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   27:	       sea_hag, tribute, smithy};
        1:   28:  	initializeGame(2, k, 7, p);
        -:   29:
        -:   30:	
        -:   31:	//The test
        1:   32:	int cases = 1000; //how many random numbers will be tested	
     1001:   33:	for(int i=0; i<cases; i++){
        -:   34:
        -:   35:		
     1000:   36:		p->whoseTurn=rand()%4;
     1000:   37:		int player = p->whoseTurn;
        -:   38:		
     1000:   39:		int cardsInDeck = rand()%10;
     1000:   40:		int cardsInHand = rand()%5+1;
        -:   41:
        -:   42:		
     1000:   43:		for(int i = 0 ; i<cardsInDeck; i++){p->deck[player][i] = rand()%27;}
     1000:   44:		for(int i = 0 ; i<cardsInHand; i++){p->hand[player][i] = rand()%27;}
        -:   45:		
        -:   46:		
        -:   47:		
     1000:   48:		p->deckCount[player] = cardsInDeck;
        -:   49:		
     1000:   50:		int smithyLocation = rand()%cardsInHand;
     1000:   51:		p->hand[player][smithyLocation]=smithy;
     1000:   52:		p->handCount[player]=cardsInHand;
        -:   53:		
        -:   54:		
        -:   55:		int handBefore, handAfter, deckBefore, deckAfter;
        -:   56:		
     1000:   57:		handBefore = p->handCount[player];
     1000:   58:		deckBefore = p->deckCount[player];
        -:   59:		
     1000:   60:		SmithyCard( p, player, smithyLocation);
        -:   61:		
     1000:   62:		handAfter = p->handCount[player];
     1000:   63:		deckAfter = p->deckCount[player];	
        -:   64:		
     1000:   65:		if((handAfter==handBefore+2) && (deckBefore == deckAfter + 3)){passes++;}
      332:   66:		else if(deckAfter == 0 && handAfter == handBefore + deckBefore -1){passes++;}
        -:   67:		else{
    #####:   68:			fails++;
        -:   69:		
    #####:   70:			printf("\nFailure: test %d", i);
    #####:   71:			printf("\nbefore call handCount = %d   ", handBefore);
    #####:   72:			printf("deckCount = %d   \n",deckBefore);
        -:   73:		
    #####:   74:			printf("after call handCount = %d   ", handAfter);
    #####:   75:			printf("deckCount = %d   \n", deckAfter);
        -:   76:		}
        -:   77:	
        -:   78:	
        -:   79:	
        -:   80:	}
        -:   81:	
        -:   82:	
        -:   83:		
        -:   84:			//result output
        1:   85:			printf("\n\n Test Complete: %d passes,  %d fails",passes,fails);
        -:   86:	
        -:   87:
        -:   88:
        1:   89:return 0;
        -:   90:}
        -:   91:
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* This is a unit test for the whoseTurn() functions
        -:    2: *	sets a value to whoesturn in the gameState 
        -:    3: *	then compares it to the return of the function
        -:    4: *	whoseTurn(). this test does not fail invalid 
        -:    5: *	number of players because the function does not 
        -:    6: *	specify that it is supposed to do so.
        -:    7: *
        -:    8: */
        -:    9:  
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        1:   18:int main () {
        -:   19:
        -:   20:	
        1:   21:	int passes = 0; int fails = 0; // keeps track of case results
        -:   22:
        -:   23:	//initalize a fake gamestate
        -:   24:	struct gameState G;
        1:   25:	struct gameState *p = &G;
        1:   26:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   27:	       sea_hag, tribute, smithy};
        1:   28:  	initializeGame(2, k, 7, p);
        -:   29:
        -:   30:	
        -:   31:	//The test
        1:   32:	int cases = 1000; //how many random numbers will be tested	
     1001:   33:	for(int i=0; i<cases; i++){
        -:   34:
        -:   35:		
     1000:   36:		p->whoseTurn=rand()%4;
     1000:   37:		int player = p->whoseTurn;
        -:   38:		
     1000:   39:		int cardsInDeck = rand()%10;
     1000:   40:		int cardsInHand = rand()%5+1;
        -:   41:
        -:   42:		
     1000:   43:		for(int i = 0 ; i<cardsInDeck; i++){p->deck[player][i] = rand()%27;}
     1000:   44:		for(int i = 0 ; i<cardsInHand; i++){p->hand[player][i] = rand()%27;}
        -:   45:		
        -:   46:		
        -:   47:		
     1000:   48:		p->deckCount[player] = cardsInDeck;
        -:   49:		
     1000:   50:		int outpostLocation = rand()%cardsInHand;
     1000:   51:		p->hand[player][outpostLocation]=outpost;
     1000:   52:		p->handCount[player]=cardsInHand;
        -:   53:		
     1000:   54:		cardEffect(outpost, 0,0,0, p, outpostLocation, 0);
        -:   55:		
     1000:   56:		if(p->outpostPlayed){passes++;}
    #####:   57:		else{fails++;}
        -:   58:	
        -:   59:	
        -:   60:	}
        -:   61:	
        -:   62:		
        -:   63:			//result output
        1:   64:			printf("\n\n Test Complete: %d passes,  %d fails",passes,fails);
        -:   65:	
        -:   66:
        -:   67:
        1:   68:return 0;
        -:   69:}
        -:   70:
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* This is a unit test for the whoseTurn() functions
        -:    2: *	sets a value to whoesturn in the gameState 
        -:    3: *	then compares it to the return of the function
        -:    4: *	whoseTurn(). this test does not fail invalid 
        -:    5: *	number of players because the function does not 
        -:    6: *	specify that it is supposed to do so.
        -:    7: *
        -:    8: */
        -:    9:  
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        1:   18:int main (){
        -:   19:
        -:   20:	//printf("made it to in main");
        -:   21:	
        1:   22:	int passes = 0; int fails = 0; // keeps track of case results
        -:   23:	
        -:   24:	
        -:   25:	
        -:   26:	//initalize a fake gamestate
        -:   27:	struct gameState G;
        1:   28:	struct gameState *p = &G;
        1:   29:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   30:	       sea_hag, tribute, smithy};
        -:   31:	
        -:   32:
        1:   33:  	initializeGame(2, k, 7, p);
        -:   34:
        -:   35:	//printf("made it past initalization");
        -:   36:	
        -:   37:	//The test
        1:   38:	int cases = 1000; //how many random numbers will be tested	
     1001:   39:	for(int i=0; i<cases; i++){
        -:   40:
     1000:   41:		int player = 0;
     1000:   42:		int cardsInDeck = rand()%10;
     1000:   43:		int cardsInHand = rand()%5+1;
        -:   44:
        -:   45:		
     1000:   46:		for(int i = 0 ; i<cardsInDeck; i++){p->deck[player][i] = rand()%27;}
     1000:   47:		for(int i = 0 ; i<cardsInHand; i++){p->hand[player][i] = rand()%27;}
        -:   48:		
     1000:   49:		p->deckCount[player] = cardsInDeck;
        -:   50:		
     1000:   51:		int villageLocation = rand()%cardsInHand;
     1000:   52:		p->hand[player][villageLocation]=village;
     1000:   53:		p->handCount[player]=cardsInHand;
        -:   54:		
        -:   55:		
        -:   56:		int handBefore, handAfter, deckBefore, deckAfter, actionsBefore, actionsAfter;
        -:   57:		
     1000:   58:		handBefore = p->handCount[player];
     1000:   59:		deckBefore = p->deckCount[player];
     1000:   60:		actionsBefore = p->numActions;
        -:   61:		
     1000:   62:		cardEffect(village, 0,0,0, p, villageLocation, 0);
        -:   63:		
     1000:   64:		handAfter = p->handCount[player];
     1000:   65:		deckAfter = p->deckCount[player];	
     1000:   66:		actionsAfter = p->numActions;
        -:   67:		
        -:   68:		
     1000:   69:		if((handAfter==handBefore) && (deckBefore == deckAfter + 1) && (actionsAfter == actionsBefore+2)){passes++;}
      102:   70:		else if((deckAfter == 0) && (handAfter == handBefore + deckBefore -1)&&(actionsAfter == actionsBefore+2)){passes++;}
        -:   71:		else{
    #####:   72:			fails++;
        -:   73:		
    #####:   74:			printf("\nFailure: test");
    #####:   75:			printf("\nbefore call handCount = %d   ", handBefore);
    #####:   76:			printf("deckCount = %d   \n",deckBefore);
    #####:   77:			printf("actionCount = %d   \n",actionsBefore);
        -:   78:		
    #####:   79:			printf("after call handCount = %d   ", handAfter);
    #####:   80:			printf("deckCount = %d   \n", deckAfter);
    #####:   81:			printf("actionCount = %d   \n",actionsAfter);
        -:   82:		}
        -:   83:	
        -:   84:	
        -:   85:	
        -:   86:	}
        -:   87:	
        -:   88:	
        -:   89:		
        -:   90:			//result output
        1:   91:			printf("\n\n Test Complete: %d passes,  %d fails",passes,fails);
        -:   92:	
        -:   93:
        -:   94:
        1:   95:return 0;
        -:   96:}
        -:   97:
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* This is a unit test for the whoseTurn() functions
        -:    2: *	sets a value to whoesturn in the gameState 
        -:    3: *	then compares it to the return of the function
        -:    4: *	whoseTurn(). this test does not fail invalid 
        -:    5: *	number of players because the function does not 
        -:    6: *	specify that it is supposed to do so.
        -:    7: *
        -:    8: */
        -:    9:  
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        1:   18:int main (){
        -:   19:
        -:   20:	//printf("made it to in main");
        -:   21:	
        1:   22:	int passes = 0; int fails = 0; // keeps track of case results
        -:   23:	
        -:   24:	
        -:   25:	
        -:   26:	//initalize a fake gamestate
        -:   27:	struct gameState G;
        1:   28:	struct gameState *p = &G;
        1:   29:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   30:	       sea_hag, tribute, smithy};
        -:   31:	
        -:   32:
        1:   33:  	initializeGame(2, k, 7, p);
        -:   34:
        -:   35:	//printf("made it past initalization");
        -:   36:	
        -:   37:	//The test
        1:   38:	int cases = 1000; //how many random numbers will be tested	
     1001:   39:	for(int i=0; i<cases; i++){
        -:   40:
     1000:   41:		int player = 0;
     1000:   42:		int cardsInDeck = rand()%10;
     1000:   43:		int cardsInHand = rand()%5+1;
        -:   44:
        -:   45:		
     1000:   46:		for(int i = 0 ; i<cardsInDeck; i++){p->deck[player][i] = rand()%27;}
     1000:   47:		for(int i = 0 ; i<cardsInHand; i++){p->hand[player][i] = rand()%27;}
        -:   48:		
     1000:   49:		p->deckCount[player] = cardsInDeck;
        -:   50:		
     1000:   51:		int hallLocation = rand()%cardsInHand;
     1000:   52:		p->hand[player][hallLocation]=great_hall;
     1000:   53:		p->handCount[player]=cardsInHand;
        -:   54:		
        -:   55:		
        -:   56:		int handBefore, handAfter, deckBefore, deckAfter, actionsBefore, actionsAfter;
        -:   57:		
     1000:   58:		handBefore = p->handCount[player];
     1000:   59:		deckBefore = p->deckCount[player];
     1000:   60:		actionsBefore = p->numActions;
        -:   61:		
     1000:   62:		cardEffect(great_hall, 0,0,0, p, hallLocation, 0);
        -:   63:		
     1000:   64:		handAfter = p->handCount[player];
     1000:   65:		deckAfter = p->deckCount[player];	
     1000:   66:		actionsAfter = p->numActions;
        -:   67:		
        -:   68:		
     1000:   69:		if((handAfter==handBefore) && (deckBefore == deckAfter + 1) && (actionsAfter == actionsBefore+1)){passes++;}
      102:   70:		else if((deckAfter == 0) && (handAfter == handBefore + deckBefore -1)&&(actionsAfter == actionsBefore+1)){passes++;}
        -:   71:		else{
    #####:   72:			fails++;
        -:   73:		
    #####:   74:			printf("\nFailure: test");
    #####:   75:			printf("\nbefore call handCount = %d   ", handBefore);
    #####:   76:			printf("deckCount = %d   \n",deckBefore);
    #####:   77:			printf("actionCount = %d   \n",actionsBefore);
        -:   78:		
    #####:   79:			printf("after call handCount = %d   ", handAfter);
    #####:   80:			printf("deckCount = %d   \n", deckAfter);
    #####:   81:			printf("actionCount = %d   \n",actionsAfter);
        -:   82:		}
        -:   83:	
        -:   84:	
        -:   85:	
        -:   86:	}
        -:   87:	
        -:   88:	
        -:   89:		
        -:   90:			//result output
        1:   91:			printf("\n\n Test Complete: %d passes,  %d fails",passes,fails);
        -:   92:	
        -:   93:
        -:   94:
        1:   95:return 0;
        -:   96:}
        -:   97:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 62053 returned 100% blocks executed 100%
    62053:    8:int compare(const void* a, const void* b) {
    62053:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    22433:   10:    return 1;
    39620:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
    23765:   12:    return -1;
    15855:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1000 returned 100% blocks executed 100%
     1000:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
     1000:   23:  int* k = malloc(10 * sizeof(int));
     1000:   24:  k[0] = k1;
     1000:   25:  k[1] = k2;
     1000:   26:  k[2] = k3;
     1000:   27:  k[3] = k4;
     1000:   28:  k[4] = k5;
     1000:   29:  k[5] = k6;
     1000:   30:  k[6] = k7;
     1000:   31:  k[7] = k8;
     1000:   32:  k[8] = k9;
     1000:   33:  k[9] = k10;
     1000:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 88%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:			{
       20:  115:			if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:				state->supplyCount[i] = 8; 
        -:  117:			}
    #####:  118:			else{ state->supplyCount[i] = 12; }
        -:  119:			}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1886 returned 100% blocks executed 100%
     1886:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1886:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1886:  209:  if (state->deckCount[player] < 1)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
     1801:  210:    return -1;
       85:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15188:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    15018:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    15018:  216:    newDeck[newDeckPos] = state->deck[player][card];
    15018:  217:    newDeckPos++;
  1245754:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1230736:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    15018:  221:    state->deckCount[player]--;
        -:  222:  }
    14609:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    14524:  224:    state->deck[player][i] = newDeck[i];
    14524:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       85:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 1000 returned 100% blocks executed 100%
     1000:  311:int numHandCards(struct gameState *state) {
     1000:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5200 returned 100% blocks executed 100%
     5200:  346:int whoseTurn(struct gameState *state) {
     5200:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3000 returned 100% blocks executed 100%
     3000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     3000:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -:  396:    {
      479:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2521:  401:  j = 0;
    65546:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
    63025:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  405:	{
     1790:  406:	  j++;
        -:  407:	}
        -:  408:    }
     2521:  409:  if ( j >= 3)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  410:    {
      274:  411:      return 1;
        -:  412:    }
        -:  413:
     2247:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 24783 returned 100% blocks executed 100%
    24783:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    24783:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    16554:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
    14818:  534:      state->deck[player][i] = state->discard[player][i];
    14818:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1736:  538:    state->deckCount[player] = state->discardCount[player];
     1736:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1736:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1736:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1736:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1736:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1736:  559:    if (deckCounter == 0)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     1671:  560:      return -1;
        -:  561:
       65:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       65:  563:    state->deckCount[player]--;
       65:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    23047:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23047:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23047:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23047:  576:    state->deckCount[player]--;
    23047:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23112:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1000 returned 100% blocks executed 100%
     1000:  583:int getCost(int cardNumber)
        -:  584:{
     1000:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 2%
branch  2 taken 2%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 2%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 2%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 4%
branch 12 taken 2%
branch 13 taken 2%
branch 14 taken 3%
branch 15 taken 2%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 4%
branch 19 taken 3%
branch 20 taken 4%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 2%
branch 25 taken 3%
branch 26 taken 2%
branch 27 taken 25%
        -:  586:    {
        -:  587:    case curse:
       30:  588:      return 0;
        -:  589:    case estate:
       23:  590:      return 2;
        -:  591:    case duchy:
       23:  592:      return 5;
        -:  593:    case province:
       25:  594:      return 8;
        -:  595:    case copper:
       29:  596:      return 0;
        -:  597:    case silver:
       24:  598:      return 3;
        -:  599:    case gold:
       26:  600:      return 6;
        -:  601:    case adventurer:
       31:  602:      return 6;
        -:  603:    case council_room:
       22:  604:      return 5;
        -:  605:    case feast:
       31:  606:      return 4;
        -:  607:    case gardens:
       33:  608:      return 4;
        -:  609:    case mine:
       35:  610:      return 5;
        -:  611:    case remodel:
       22:  612:      return 4;
        -:  613:    case smithy:
       20:  614:      return 4;
        -:  615:    case village:
       27:  616:      return 3;
        -:  617:    case baron:
       21:  618:      return 4;
        -:  619:    case great_hall:
       29:  620:      return 3;
        -:  621:    case minion:
       29:  622:      return 5;
        -:  623:    case steward:
       35:  624:      return 3;
        -:  625:    case tribute:
       34:  626:      return 5;
        -:  627:    case ambassador:
       35:  628:      return 3;
        -:  629:    case cutpurse:
       30:  630:      return 4;
        -:  631:    case embargo: 
       31:  632:      return 2;
        -:  633:    case outpost:
       33:  634:      return 5;
        -:  635:    case salvager:
       20:  636:      return 4;
        -:  637:    case sea_hag:
       33:  638:      return 4;
        -:  639:    case treasure_map:
       20:  640:      return 4;
        -:  641:    }
        -:  642:	
      249:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4200 returned 100% blocks executed 13%
     4200:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     4200:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     4200:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     4200:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     4200:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     4200:  660:  int z = 0;// this is the counter for the temp hand
     4200:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
      771:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	////////////////////////////////////////////////
        -:  666:  //uses switch to select card and perform actions
        -:  667:  //////////////////////////////////////////////////
        -:  668:  
        -:  669:  
     4200:  670:  switch( card ) 
branch  0 taken 5%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 48%
branch  8 taken 0%
branch  9 taken 24%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 24%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  671:    {
        -:  672:    case adventurer:
    16133:  673:      while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    15733:  674:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      130:  675:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  676:	}
    15733:  677:	drawCard(currentPlayer, state);
call    0 returned 100%
    15733:  678:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    15733:  679:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
      400:  680:	  drawntreasure++;
        -:  681:	else{
    15333:  682:	  temphand[z]=cardDrawn;
    15333:  683:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    15333:  684:	  z++;
        -:  685:	}
        -:  686:      }
    15733:  687:      while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    15333:  688:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    15333:  689:	z=z-1;
        -:  690:      }
      200:  691:      return 0;
        -:  692:			
        -:  693:    case council_room:
        -:  694:      //+4 Cards
    #####:  695:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  696:	{
    #####:  697:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  698:	}
        -:  699:			
        -:  700:      //+1 Buy
    #####:  701:      state->numBuys++;
        -:  702:			
        -:  703:      //Each other player draws a card
    #####:  704:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  707:	    {
    #####:  708:	      drawCard(i, state);
call    0 never executed
        -:  709:	    }
        -:  710:	}
        -:  711:			
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:			
    #####:  715:      return 0;
        -:  716:			
    #####:  717:    case feast: return 0;/*
        -:  718:      //gain card with cost up to 5
        -:  719:      //Backup hand
        -:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  721:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  722:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  723:      }
        -:  724:      //Backup hand
        -:  725:
        -:  726:      //Update Coins for Buy
        -:  727:      updateCoins(currentPlayer, state, 5);
        -:  728:      x = 1;//Condition to loop on
        -:  729:      while( x == 1) {//Buy one card
        -:  730:	if (supplyCount(choice1, state) <= 0){
        -:  731:	  if (DEBUG)
        -:  732:	    printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:	  }
        -:  737:	}
        -:  738:	else if (state->coins < getCost(choice1)){
        -:  739:	  printf("That card is too expensive!\n");
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:	  }
        -:  744:	}
        -:  745:	else{
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:	  }
        -:  750:
        -:  751:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  752:	  x = 0;//No more buying cards
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:	  }
        -:  757:
        -:  758:	}
        -:  759:      }     
        -:  760:
        -:  761:      //Reset Hand
        -:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  763:	state->hand[currentPlayer][i] = temphand[i];
        -:  764:	temphand[i] = -1;
        -:  765:      }
        -:  766:      //Reset Hand
        -:  767:      			
        -:  768:      return 0; */
        -:  769:			
        -:  770:    case gardens:
    #####:  771:      return -1;
        -:  772:			
        -:  773:    case mine:
    #####:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:		
    #####:  781:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  782:	{
    #####:  783:	  return -1;
        -:  784:	}
        -:  785:
    #####:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:
    #####:  791:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  792:
        -:  793:      //discard card from hand
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  795:
        -:  796:      //discard trashed card
    #####:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  798:	{
    #####:  799:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  800:	    {
    #####:  801:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  802:	      break;
        -:  803:	    }
        -:  804:	}
        -:  805:			
    #####:  806:      return 0;
        -:  807:			
        -:  808:    case remodel:
    #####:  809:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  810:
    #####:  811:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  812:	{
    #####:  813:	  return -1;
        -:  814:	}
        -:  815:
    #####:  816:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  817:
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  820:
        -:  821:      //discard trashed card
    #####:  822:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  823:	{
    #####:  824:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  825:	    {
    #####:  826:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  827:	      break;
        -:  828:	    }
        -:  829:	}
        -:  830:
        -:  831:
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case smithy:
        -:  835:
        -:  836:	
    #####:  837:	return(SmithyCard(state, currentPlayer, handPos));
call    0 never executed
        -:  838:
        -:  839:/*
        -:  840:      //+3 Cards
        -:  841:      for (i = 0; i < 3; i++)
        -:  842:	{
        -:  843:	  drawCard(currentPlayer, state);
        -:  844:	}
        -:  845:			
        -:  846:      //discard card from hand
        -:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:      return 0;
        -:  849:*/
        -:  850:
        -:  851:		
        -:  852:    case village:
        -:  853:      //+1 Card
     2000:  854:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  855:			
        -:  856:      //+2 Actions
        -:  857:	  
     2000:  858:      state->numActions = state->numActions + 2;
        -:  859:			
        -:  860:      //discard played card from hand
     2000:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000:  862:      return 0;
        -:  863:		
        -:  864:    case baron:
    #####:  865:      state->numBuys++;//Increase buys by 1!
    #####:  866:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  867:	int p = 0;//Iterator for hand!
    #####:  868:	int card_not_discarded = 1;//Flag for discard set!
    #####:  869:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  870:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  871:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  872:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  873:	    state->discardCount[currentPlayer]++;
    #####:  874:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  875:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  876:	    }
    #####:  877:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  878:	    state->handCount[currentPlayer]--;
    #####:  879:	    card_not_discarded = 0;//Exit the loop
        -:  880:	  }
    #####:  881:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  882:	    if(DEBUG) {
        -:  883:	      printf("No estate cards in your hand, invalid choice\n");
        -:  884:	      printf("Must gain an estate if there are any\n");
        -:  885:	    }
    #####:  886:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  887:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  888:	      state->supplyCount[estate]--;//Decrement estates
    #####:  889:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  890:		isGameOver(state);
call    0 never executed
        -:  891:	      }
        -:  892:	    }
    #####:  893:	    card_not_discarded = 0;//Exit the loop
        -:  894:	  }
        -:  895:			    
        -:  896:	  else{
    #####:  897:	    p++;//Next card
        -:  898:	  }
        -:  899:	}
        -:  900:      }
        -:  901:			    
        -:  902:      else{
    #####:  903:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  905:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  906:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	    isGameOver(state);
call    0 never executed
        -:  908:	  }
        -:  909:	}
        -:  910:      }
        -:  911:	    
        -:  912:      
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case great_hall:
        -:  916:	
     1000:  917:		return(GreatHallCard(state, currentPlayer, handPos));
call    0 returned 100%
        -:  918:	/*
        -:  919:      //+1 Card
        -:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+1 Actions
        -:  923:      state->numActions++;
        -:  924:			
        -:  925:      //discard card from hand
        -:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:      return 0;
        -:  928:	*/	
        -:  929:		
        -:  930:    case minion:
        -:  931:	
    #####:  932:		return(MinionCard(state, currentPlayer, handPos, choice1, choice2));
call    0 never executed
        -:  933:		
        -:  934:	/*	
        -:  935:      //+1 action
        -:  936:      state->numActions++;
        -:  937:			
        -:  938:      //discard card from hand
        -:  939:      discardCard(handPos, currentPlayer, state, 0);
        -:  940:			
        -:  941:      if (choice1)		//+2 coins
        -:  942:	{
        -:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:			
        -:  946:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  947:	{
        -:  948:	  //discard hand
        -:  949:	  while(numHandCards(state) > 0)
        -:  950:	    {
        -:  951:	      discardCard(handPos, currentPlayer, state, 0);
        -:  952:	    }
        -:  953:				
        -:  954:	  //draw 4
        -:  955:	  for (i = 0; i < 4; i++)
        -:  956:	    {
        -:  957:	      drawCard(currentPlayer, state);
        -:  958:	    }
        -:  959:				
        -:  960:	  //other players discard hand and redraw if hand size > 4
        -:  961:	  for (i = 0; i < state->numPlayers; i++)
        -:  962:	    {
        -:  963:	      if (i != currentPlayer)
        -:  964:		{
        -:  965:		  if ( state->handCount[i] > 4 )
        -:  966:		    {
        -:  967:		      //discard hand
        -:  968:		      while( state->handCount[i] > 0 )
        -:  969:			{
        -:  970:			  discardCard(handPos, i, state, 0);
        -:  971:			}
        -:  972:							
        -:  973:		      //draw 4
        -:  974:		      for (j = 0; j < 4; j++)
        -:  975:			{
        -:  976:			  drawCard(i, state);
        -:  977:			}
        -:  978:		    }
        -:  979:		}
        -:  980:	    }
        -:  981:				
        -:  982:	}
        -:  983:      return 0;
        -:  984:	*/
        -:  985:	
        -:  986:    case steward:
    #####:  987:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  988:	{
        -:  989:	  //+2 cards
    #####:  990:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  991:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  992:	}
    #####:  993:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  994:	{
        -:  995:	  //+2 coins
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:      else
        -:  999:	{
        -: 1000:	  //trash 2 cards in hand
    #####: 1001:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1002:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1003:	}
        -: 1004:			
        -: 1005:      //discard card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:	
    #####: 1163:		return(EmbargoCard( state, currentPlayer, handPos, choice1));
call    0 never executed
        -: 1164:      
        -: 1165:	/*  
        -: 1166:	  //+2 Coins
        -: 1167:      state->coins = state->coins + 2;
        -: 1168:			
        -: 1169:      //see if selected pile is in play
        -: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:	{
        -: 1172:	  return -1;
        -: 1173:	}
        -: 1174:			
        -: 1175:      //add embargo token to selected supply pile
        -: 1176:      state->embargoTokens[choice1]++;
        -: 1177:			
        -: 1178:      //trash card
        -: 1179:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1180:      return 0;
        -: 1181:	*/
        -: 1182:	
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
     1000: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
     1000: 1188:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:		return(SeaHagCard( state, currentPlayer));
call    0 never executed
        -: 1209:/*	  
        -: 1210:	  for (i = 0; i < state->numPlayers; i++){
        -: 1211:	if (i != currentPlayer){
        -: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1213:	  state->discardCount[i]++;
        -: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
        -: 1217:      return 0;
        -: 1218:*/
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
function discardCard called 6000 returned 100% blocks executed 89%
     6000: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
     6000: 1258:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1259:    {
        -: 1260:      //add card to played pile
     6000: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6000: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
     6000: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
     6000: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
      674: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
     5326: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
     5326: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
     5326: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
     5326: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
     6000: 1289:  return 0;
        -: 1290:}
        -: 1291:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
       10: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
       60: 1337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1338:    {
       50: 1339:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1340:	{
       40: 1341:	  state->coins += 1;
        -: 1342:	}
       10: 1343:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
       10: 1347:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
       10: 1354:  state->coins += bonus;
        -: 1355:
       10: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364:
        -: 1365:////////////////////////////
        -: 1366://     MY REFACTORING     //
        -: 1367:////////////////////////////
        -: 1368:
        -: 1369:
function SmithyCard called 2000 returned 100% blocks executed 100%
     2000: 1370:int SmithyCard( struct gameState *state, int currentPlayer, int handPos){
        -: 1371:      //+3 Cards
     8000: 1372:      for (int i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1373:	{
     6000: 1374:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1375:	}
        -: 1376:			
        -: 1377:      //discard card from hand
     2000: 1378:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000: 1379:      return 0;
        -: 1380:}
        -: 1381:
        -: 1382://////////////////////////////
        -: 1383:
function GreatHallCard called 1000 returned 100% blocks executed 100%
     1000: 1384:int GreatHallCard( struct gameState *state, int currentPlayer, int handPos){
        -: 1385:	//+1 Card
     1000: 1386:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1387:		
        -: 1388:	//+1 Actions
     1000: 1389:	state->numActions++;
        -: 1390:		
        -: 1391:	//discard card from hand
     1000: 1392:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000: 1393:	return 0;
        -: 1394:}
        -: 1395:
        -: 1396://////////////////////////////
        -: 1397:
function MinionCard called 0 returned 0% blocks executed 0%
    #####: 1398:int MinionCard( struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -: 1399:      int i,j;
        -: 1400:	  //+1 action
    #####: 1401:      state->numActions++;
        -: 1402:			
        -: 1403:      //discard card from hand
    #####: 1404:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1405:			
    #####: 1406:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1407:	{
    #####: 1408:	  state->coins = state->coins + 2;
        -: 1409:	}
        -: 1410:			
    #####: 1411:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1412:	{
        -: 1413:	  //discard hand
    #####: 1414:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1415:	    {
    #####: 1416:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:	    }
        -: 1418:				
        -: 1419:	  //draw 4
    #####: 1420:	  for ( i = 0; i < 3; i++) //<< 3 << 4
branch  0 never executed
branch  1 never executed
        -: 1421:	    {
    #####: 1422:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1423:	    }
        -: 1424:				
        -: 1425:	  //other players discard hand and redraw if hand size > 4
    #####: 1426:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1427:	    {
    #####: 1428:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1429:		{
    #####: 1430:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1431:		    {
        -: 1432:		      //discard hand
    #####: 1433:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1434:			{
    #####: 1435:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1436:			}
        -: 1437:							
        -: 1438:		      //draw 4
    #####: 1439:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1440:			{
    #####: 1441:			  drawCard(i, state);
call    0 never executed
        -: 1442:			}
        -: 1443:		    }
        -: 1444:		}
        -: 1445:	    }
        -: 1446:				
        -: 1447:	}
    #####: 1448:      return 0;
        -: 1449:}
        -: 1450:
        -: 1451://////////////////////////////
        -: 1452:
function SeaHagCard called 0 returned 0% blocks executed 0%
    #####: 1453:int SeaHagCard( struct gameState *state, int currentPlayer ){
    #####: 1454:	  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1455:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1456:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]-2]; //<<--<<-2
    #####: 1457:	  state->deckCount[i]--;
    #####: 1458:	  state->discardCount[i]++;
    #####: 1459:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1460:	}
        -: 1461:	  }
    #####: 1462:	  return 0;
        -: 1463:}
        -: 1464:
        -: 1465://////////////////////////////
        -: 1466:
function EmbargoCard called 0 returned 0% blocks executed 0%
    #####: 1467:int EmbargoCard( struct gameState *state, int currentPlayer, int handPos, int choice1){
        -: 1468: 
        -: 1469:      //+2 Coins
    #####: 1470:      state->coins = state->coins + 2;
        -: 1471:			
        -: 1472:      //see if selected pile is in play
    #####: 1473:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1474:	{
    #####: 1475:	  return -1;
        -: 1476:	}
        -: 1477:			
        -: 1478:      //add embargo token to selected supply pile
    #####: 1479:      state->embargoTokens[choice1]++;
        -: 1480:			
        -: 1481:      //trash card
    #####: 1482:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1483:      return 0;
        -: 1484:		
        -: 1485:
        -: 1486:}
